name: LSFTP CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Build and test on multiple platforms
  test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        rust: [stable, 1.70.0]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-20.04
            rust: 1.70.0
            target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libtpm2-tools \
          libpcsclite-dev \
          libudev-dev \
          libusb-1.0-0-dev

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run cargo audit
      run: cargo audit

    - name: Build all crates
      run: |
        cargo build --all-targets --all-features
        cargo build --release --all-targets --all-features

    - name: Run unit tests
      run: cargo test --all-features

    - name: Run integration tests
      run: cargo test --all-features --test '*'

    - name: Generate test coverage
      run: cargo tarpaulin --all-features --out Xml --output-dir coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Run cargo audit
      run: cargo audit

    - name: Run cargo-audit with deny
      run: |
        cargo install cargo-deny
        cargo deny check

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten

  # Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev

    - name: Build documentation
      run: cargo doc --all-features --no-deps

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/master'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  # Release build
  release:
    name: Release Build
    needs: [test, security, docs]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libtpm2-tools \
          libpcsclite-dev

    - name: Build release binaries
      run: |
        cargo build --release --all-targets --all-features
        mkdir -p dist
        cp target/release/lsftp-server dist/
        cp target/release/lsftp-client dist/
        cp target/release/lsftp-tools dist/

    - name: Create release archive
      run: |
        tar -czf lsftp-v1.0-linux-x86_64.tar.gz -C dist .
        sha256sum lsftp-v1.0-linux-x86_64.tar.gz > lsftp-v1.0-linux-x86_64.tar.gz.sha256

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lsftp-release
        path: |
          lsftp-v1.0-linux-x86_64.tar.gz
          lsftp-v1.0-linux-x86_64.tar.gz.sha256

  # Docker build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t lsftp:latest .
        docker build -t lsftp:v1.0 .

    - name: Run Docker tests
      run: |
        docker run --rm lsftp:latest lsftp-tools --help
        docker run --rm lsftp:latest lsftp-client --help
        docker run --rm lsftp:latest lsftp-server --help

    - name: Push to Docker Hub
      if: github.ref == 'refs/heads/master'
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker tag lsftp:latest ${{ secrets.DOCKER_USERNAME }}/lsftp:latest
        docker tag lsftp:v1.0 ${{ secrets.DOCKER_USERNAME }}/lsftp:v1.0
        docker push ${{ secrets.DOCKER_USERNAME }}/lsftp:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/lsftp:v1.0
